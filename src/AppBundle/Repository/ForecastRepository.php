<?php

namespace AppBundle\Repository;

use Doctrine\ORM\EntityRepository;
use Doctrine\ORM\Query;

/**
 * ForecastsRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ForecastRepository extends EntityRepository
{
    /**
     * Returns Forecast ID and calculated temperature deviation for the day time (high)
     * @param string $startDate
     * @param string $endDate
     * @return array
     */
    public function getForecastIdAndTemperatureDevHigh(string $startDate, string $endDate)
    {
        $query = $this->createQueryBuilder('f')
            ->select(
                'AVG(f.temperatureLow - t.temperature) as temp_deviation_high',
                'f.id'
            )
            ->from('AppBundle:Temperature', 't')
            ->where('t.city = f.city')
            ->andWhere('t.provider = f.provider')
            ->andWhere('f.forecastDate between :startDate and :endDate')
            ->setParameter('startDate', $startDate)
            ->setParameter('endDate', $endDate)
            ->andWhere('date_add(f.forecastDate, f.forecastDays, \'day\') = date(t.date) ')
            ->andWhere('date_format(t.date, \'%H:%i:%s\') between \'09:00:00\' and \'21:00:00\'')
            ->addGroupBy('f.id')
            ->getQuery();

        return $query->getResult();
    }

    public function addDaysToForecastDate(int $cityId)
    {
        $query = $this->createQueryBuilder('f')
                       ->select('date_add(f.forecastDate, f.forecastDays, \'day\') as forecastDate')
                       ->addSelect('f.temperatureHigh')
                       ->addSelect('f.temperatureLow')
                       ->addSelect('f.humidity')
                       ->addSelect('f.pressure')
                       ->addSelect('(f.city) as cityId')
                       ->where('f.city=:city')
                       ->setParameter('city', $cityId)
                       ->getQuery();
        return $query->getResult();
    }

    /**
     * Returns Forecast ID and calculated temperature deviation for the night time (low)
     * @param string $startDate
     * @param string $endDate
     * @return array
     */
    public function getForecastIdAndTemperatureDevLow(string $startDate, string $endDate)
    {
        $query = $this->createQueryBuilder('f')
            ->select(
                'AVG(f.temperatureLow - t.temperature) as temp_deviation_low',
                'f.id'
            )
            ->from('AppBundle:Temperature', 't')
            ->where('t.city = f.city')
            ->andWhere('t.provider = f.provider')
            ->andWhere('f.forecastDate between :startDate and :endDate')
            ->setParameter('startDate', $startDate)
            ->setParameter('endDate', $endDate)
            ->andWhere('date_add(f.forecastDate, f.forecastDays, \'day\') = date(t.date) ')
            ->andWhere('date_format(t.date, \'%H:%i:%s\') not between \'09:00:00\' and \'21:00:00\'')
            ->addGroupBy('f.id')
            ->getQuery();

        return $query->getResult();
    }

    /**
     * Returns average forecast temperatures of other providers
     * @param string|null $startDate
     * @param string|null $endDate
     * @return array
     */
    public function getForecastAverage(string $startDate = null, string $endDate = null)
    {
        if (null === $startDate) {
            // Current date
            $startDate = date('Y-m-d');
        }

        if (null === $endDate) {
            // Add one day to startDate
            $endDate = date('Y-m-d', strtotime($startDate . ' +1 day'));
        }

        $query = $this->createQueryBuilder('f')
            ->select(
                '(f.city) as cityId',
                'f.forecastDate as forecastDate',
                'f.forecastDays as forecastDays',
                'AVG(f.temperatureLow) as avgTempLow',
                'AVG(f.temperatureHigh) as avgTempHigh'
            )
            ->where('f.forecastDate >= :startDate')
            ->setParameter('startDate', $startDate)
            ->andWhere('f.forecastDate < :endDate')
            ->setParameter('endDate', $endDate)
            ->andWhere('f.provider <> :ourProvider')
            ->setParameter(
                'ourProvider',
                $this->getEntityManager()->getRepository('AppBundle:Provider')
                    ->findOneByName('Advanced Weather')->getId()
            )
            ->addGroupBy('f.city', 'f.forecastDate', 'f.forecastDays')
            ->getQuery();

        return $query->getResult();
    }

    /**
     * Returns latest forecast values for all cities (our provider only)
     * @return array
     */
    public function getOurTodayForecast()
    {
        // Get our provider ID
        $ourProviderId = $this->getOurProviderId();

        // Get max forecastDate for our provider
        $maxDateQuery = $this->createQueryBuilder('f')
            ->select('max(f.forecastDate)')
            ->where('f.provider = :ourProvider')
            ->setParameter('ourProvider', $ourProviderId)
            ->getQuery();
        $maxDate = $maxDateQuery->getArrayResult()[0][1];

        // Select required fields
        $query = $this->createQueryBuilder('f')
            ->select('c.name')
            ->addSelect('c.country')
            ->addSelect('c.countryIso3166')
            ->addSelect('f.forecastDate')
            ->addSelect('f.forecastDays')
            ->addSelect('f.temperatureHigh')
            ->addSelect('f.temperatureLow')
            ->addSelect('f.humidity')
            ->addSelect('f.pressure')
            ->innerJoin('f.city', 'c')
            ->where('f.forecastDate = :thisDate')
            ->setParameter('thisDate', $maxDate)
            ->andWhere('f.provider = :ourProvider')
            ->setParameter('ourProvider', $ourProviderId)
            ->getQuery();

        return $query->getArrayResult();
    }

    /**
     * Get our provider ID
     * @return int
     */
    private function getOurProviderId(): int
    {
        return $this
            ->getEntityManager()
            ->getRepository('AppBundle:Provider')
            ->findOneByName('Advanced Weather')
            ->getId();
    }

    public function getForecastsForSubscribers()
    {
        // Get our provider ID
        $ourProviderId = $this->getOurProviderId();

        // Select required fields
        $query = $this->createQueryBuilder('f')
            ->select('c.name')
            ->addSelect('c.country')
            ->addSelect('c.countryIso3166')
            ->addSelect('f.forecastDate')
            ->addSelect('round(f.temperatureHigh, 2) as temperatureHigh')
            ->addSelect('round(f.temperatureLow, 2) as temperatureLow')
            ->addSelect('f.humidity')
            ->addSelect('f.pressure')
            ->innerJoin('f.city', 'c')
            ->where('f.forecastDate = date(:thisDate)')
            ->setParameter('thisDate', new \DateTime('now'))
            ->andWhere('f.provider = :ourProvider')
            ->setParameter('ourProvider', $ourProviderId)
            ->andWhere('f.forecastDays = 1')
            ->getQuery();

        return $query->getResult();
    }
}
